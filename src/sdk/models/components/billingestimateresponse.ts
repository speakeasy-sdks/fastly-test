/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class Line extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "client_plan_id" })
    clientPlanId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_service_id" })
    clientServiceId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "per_unit_cost" })
    perUnitCost?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "plan_no" })
    planNo?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "service_no" })
    serviceNo?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "service_type" })
    serviceType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "units" })
    units?: number;
}

export class Lines extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "line" })
    @Type(() => Line)
    line?: Line;
}

export class Tiers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "price" })
    price?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "total" })
    total?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "units" })
    units?: number;
}

export class Regions extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Tiers })
    @Expose({ name: "tiers" })
    @Type(() => Tiers)
    tiers?: Tiers[];

    @SpeakeasyMetadata()
    @Expose({ name: "total" })
    total?: number;
}

/**
 * What the current status of this invoice can be.
 */
export enum BillingEstimateResponseStatus {
    Pending = "Pending",
    Outstanding = "Outstanding",
    Paid = "Paid",
    Mtd = "MTD",
}

export class Status extends SpeakeasyBase {
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sent_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    sentAt?: Date;

    /**
     * What the current status of this invoice can be.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: BillingEstimateResponseStatus;
}

export class Extras extends SpeakeasyBase {
    /**
     * The name of this extra cost.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Recurring monthly cost in USD. Not present if $0.0.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recurring" })
    recurring?: number;

    /**
     * Initial set up cost in USD. Not present if $0.0 or this is not the month the extra was added.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "setup" })
    setup?: number;
}

/**
 * Complete summary of the billing information.
 */
export class Total extends SpeakeasyBase {
    /**
     * The total amount of bandwidth used this month (See bandwidth_units for measurement).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bandwidth" })
    bandwidth?: number;

    /**
     * The cost of the bandwidth used this month in USD.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bandwidth_cost" })
    bandwidthCost?: number;

    /**
     * Bandwidth measurement units based on billing plan.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bandwidth_units" })
    bandwidthUnits?: string;

    /**
     * The final amount to be paid.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cost" })
    cost?: number;

    /**
     * Total incurred cost plus extras cost.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cost_before_discount" })
    costBeforeDiscount?: number;

    /**
     * Calculated discount rate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    discount?: number;

    /**
     * A list of any extras for this invoice.
     */
    @SpeakeasyMetadata({ elemType: Extras })
    @Expose({ name: "extras" })
    @Type(() => Extras)
    extras?: Extras[];

    /**
     * Total cost of all extras.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "extras_cost" })
    extrasCost?: number;

    /**
     * The total cost of bandwidth and requests used this month.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "incurred_cost" })
    incurredCost?: number;

    /**
     * How much over the plan minimum has been incurred.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "overage" })
    overage?: number;

    /**
     * The short code the plan this invoice was generated under.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "plan_code" })
    planCode?: string;

    /**
     * The minimum cost of this plan.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "plan_minimum" })
    planMinimum?: number;

    /**
     * The name of the plan this invoice was generated under.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "plan_name" })
    planName?: string;

    /**
     * The total number of requests used this month.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requests" })
    requests?: number;

    /**
     * The cost of the requests used this month.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requests_cost" })
    requestsCost?: number;

    /**
     * Payment terms. Almost always Net15.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "terms" })
    terms?: string;
}

export class BillingEstimateResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "end_time" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    endTime?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "invoice_id" })
    invoiceId?: string;

    @SpeakeasyMetadata({ elemType: Lines })
    @Expose({ name: "lines" })
    @Type(() => Lines)
    lines?: Lines[];

    /**
     * Breakdown of regional data for products that are region based.
     */
    @SpeakeasyMetadata({ elemType: Regions, elemDepth: 2 })
    @Expose({ name: "regions" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Record<string, Regions>> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], Regions);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    regions?: Record<string, Record<string, Regions>>;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "start_time" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    startTime?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    @Type(() => Status)
    status?: Status;

    /**
     * Complete summary of the billing information.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "total" })
    @Type(() => Total)
    total?: Total;

    /**
     * The current state of our third-party billing vendor. One of `up` or `down`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "vendor_state" })
    vendorState?: string;
}
