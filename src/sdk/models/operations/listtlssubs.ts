/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as components from "../../../sdk/models/components";
import { AxiosResponse } from "axios";

export class ListTlsSubsRequest extends SpeakeasyBase {
    /**
     * Limit the returned subscriptions to those that have currently active orders. Permitted values: `true`.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filter[has_active_order]",
    })
    filterHasActiveOrder?: boolean;

    /**
     * Limit the returned subscriptions by state. Valid values are `pending`, `processing`, `issued`, `renewing`, and `failed`. Accepts parameters: `not` (e.g., `filter[state][not]=renewing`).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=filter[state]" })
    filterState?: string;

    /**
     * Limit the returned subscriptions to those that include the specific domain.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=filter[tls_domains.id]" })
    filterTlsDomainsId?: string;

    /**
     * Include related objects. Optional, comma-separated values. Permitted values: `tls_authorizations` and `tls_authorizations.globalsign_email_challenge`.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=include" })
    include?: string;

    /**
     * Current page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page[number]" })
    pageNumber?: number;

    /**
     * Number of records per page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page[size]" })
    pageSize?: number;

    /**
     * The order in which to list the results by creation date.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: components.Sort;
}

export class ListTlsSubsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    tlsSubscriptionsResponse?: components.TlsSubscriptionsResponse;
}
