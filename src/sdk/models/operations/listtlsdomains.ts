/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ListTlsDomainsSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=apiKey;subtype=header;name=Fastly-Key" })
    token: string;
}

export class ListTlsDomainsRequest extends SpeakeasyBase {
    /**
     * Optional. Limit the returned domains to those currently using Fastly to terminate TLS with SNI (that is, domains considered "in use") Permitted values: true, false.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=filter[in_use]" })
    filterInUse?: string;

    /**
     * Optional. Limit the returned domains to those listed in the given TLS certificate's SAN list.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filter[tls_certificates.id]",
    })
    filterTlsCertificatesId?: string;

    /**
     * Optional. Limit the returned domains to those for a given TLS subscription.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filter[tls_subscriptions.id]",
    })
    filterTlsSubscriptionsId?: string;

    /**
     * Include related objects. Optional, comma-separated values. Permitted values: `tls_activations`, `tls_certificates`, `tls_subscriptions`, `tls_subscriptions.tls_authorizations`, and `tls_authorizations.globalsign_email_challenge`.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=include" })
    include?: string;

    /**
     * Current page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page[number]" })
    pageNumber?: number;

    /**
     * Number of records per page.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page[size]" })
    pageSize?: number;

    /**
     * The order in which to list the results by creation date.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: shared.Sort;
}

export class ListTlsDomainsResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    tlsDomainsResponse?: shared.TlsDomainsResponse;
}
