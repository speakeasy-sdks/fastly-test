/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The action to take when a rate limiter violation is detected.
 */
export enum RateLimiterResponseAction {
    Response = "response",
    ResponseObject = "response_object",
    LogOnly = "log_only",
}

export enum HttpMethods {
    Head = "HEAD",
    Options = "OPTIONS",
    Get = "GET",
    Post = "POST",
    Put = "PUT",
    Patch = "PATCH",
    Delete = "DELETE",
    Trace = "TRACE",
}

/**
 * Name of the type of logging endpoint to be used when action is `log_only`. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries.
 */
export enum LoggerType {
    Azureblob = "azureblob",
    Bigquery = "bigquery",
    Cloudfiles = "cloudfiles",
    Datadog = "datadog",
    Digitalocean = "digitalocean",
    Elasticsearch = "elasticsearch",
    Ftp = "ftp",
    Gcs = "gcs",
    Googleanalytics = "googleanalytics",
    Heroku = "heroku",
    Honeycomb = "honeycomb",
    Http = "http",
    Https = "https",
    Kafka = "kafka",
    Kinesis = "kinesis",
    Logentries = "logentries",
    Loggly = "loggly",
    Logshuttle = "logshuttle",
    Newrelic = "newrelic",
    Openstack = "openstack",
    Papertrail = "papertrail",
    Pubsub = "pubsub",
    S3 = "s3",
    Scalyr = "scalyr",
    Sftp = "sftp",
    Splunk = "splunk",
    Stackdriver = "stackdriver",
    Sumologic = "sumologic",
    Syslog = "syslog",
}

/**
 * Custom response to be sent when the rate limit is exceeded. Required if `action` is `response`.
 */
export class RateLimiterResponseResponse extends SpeakeasyBase {
    /**
     * Response body for custom limit enforcement response.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "content" })
    content?: string;

    /**
     * MIME type for custom limit enforcement response.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "content_type" })
    contentType?: string;

    /**
     * HTTP status code for custom limit enforcement response.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: number;
}

/**
 * Number of seconds during which the RPS limit must be exceeded in order to trigger a violation.
 */
export enum WindowSize {
    One = 1,
    Ten = 10,
    Sixty = 60,
}

export class RateLimiterResponse extends SpeakeasyBase {
    /**
     * The action to take when a rate limiter violation is detected.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: RateLimiterResponseAction;

    /**
     * Array of VCL variables used to generate a counter key to identify a client. Example variables include `req.http.Fastly-Client-IP`, `req.http.User-Agent`, or a custom header like `req.http.API-Key`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "client_key" })
    clientKey?: string[];

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * Revision number of the rate limiting feature implementation. Defaults to the most recent revision.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "feature_revision" })
    featureRevision?: number;

    /**
     * Array of HTTP methods to apply rate limiting to.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "http_methods" })
    httpMethods?: HttpMethods[];

    /**
     * Alphanumeric string identifying the rate limiter.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Name of the type of logging endpoint to be used when action is `log_only`. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logger_type" })
    loggerType?: LoggerType;

    /**
     * A human readable name for the rate limiting rule.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Length of time in minutes that the rate limiter is in effect after the initial violation is detected.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "penalty_box_duration" })
    penaltyBoxDuration?: number;

    /**
     * Custom response to be sent when the rate limit is exceeded. Required if `action` is `response`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "response" })
    @Type(() => RateLimiterResponseResponse)
    response?: RateLimiterResponseResponse;

    /**
     * Name of existing response object. Required if `action` is `response_object`. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "response_object_name" })
    responseObjectName?: string;

    /**
     * Upper limit of requests per second allowed by the rate limiter.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "rps_limit" })
    rpsLimit?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "service_id" })
    serviceId?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    /**
     * The name of an Edge Dictionary containing URIs as keys. If not defined or `null`, all origin URIs will be rate limited.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uri_dictionary_name" })
    uriDictionaryName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: number;

    /**
     * Number of seconds during which the RPS limit must be exceeded in order to trigger a violation.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "window_size" })
    windowSize?: WindowSize;
}
