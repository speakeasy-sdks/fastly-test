/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SchemasVersionResponse } from "./schemasversionresponse";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of this service.
 */
export enum ServiceResponseType {
    Vcl = "vcl",
    Wasm = "wasm",
}

export class ServiceResponse extends SpeakeasyBase {
    /**
     * A freeform descriptive note.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "comment" })
    comment?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Alphanumeric string identifying the customer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The name of the service.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Whether the service is paused. Services are paused due to a lack of traffic for an extended period of time. Services are resumed either when a draft version is activated or a locked version is cloned and reactivated.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paused" })
    paused?: boolean;

    /**
     * Unused at this time.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "publish_key" })
    publishKey?: string;

    /**
     * The type of this service.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: ServiceResponseType;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    /**
     * A list of [versions](/reference/api/services/version/) associated with the service.
     */
    @SpeakeasyMetadata({ elemType: SchemasVersionResponse })
    @Expose({ name: "versions" })
    @Type(() => SchemasVersionResponse)
    versions?: SchemasVersionResponse[];
}
