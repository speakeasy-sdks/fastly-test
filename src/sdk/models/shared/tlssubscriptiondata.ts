/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RelationshipMemberTlsConfigurationInput } from "./relationshipmembertlsconfiguration";
import { RelationshipMemberTlsDomainInput } from "./relationshipmembertlsdomain";
import { TypeTlsSubscription } from "./typetlssubscription";
import { Expose, Type } from "class-transformer";

/**
 * The entity that issues and certifies the TLS certificates for your subscription.
 */
export enum TlsSubscriptionDataAttributesCertificateAuthority {
    LetsEncrypt = "lets-encrypt",
    Globalsign = "globalsign",
}

export class TlsSubscriptionDataAttributes extends SpeakeasyBase {
    /**
     * The entity that issues and certifies the TLS certificates for your subscription.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "certificate_authority" })
    certificateAuthority?: TlsSubscriptionDataAttributesCertificateAuthority;
}

/**
 * The common name associated with the subscription generated by Fastly TLS. Optional. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
 */
export class TlsSubscriptionDataRelationships2Input extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "common_name" })
    @Type(() => RelationshipMemberTlsDomainInput)
    commonName?: RelationshipMemberTlsDomainInput;
}

export class TlsSubscriptionDataRelationships1TlsConfigurationInput extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => RelationshipMemberTlsConfigurationInput)
    data?: RelationshipMemberTlsConfigurationInput;
}

/**
 * The unique identifier for the set of TLS configuration options that apply to the enabled domains on this subscription. Write-only on create.
 */
export class TlsSubscriptionDataRelationships1Input extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "tls_configuration" })
    @Type(() => TlsSubscriptionDataRelationships1TlsConfigurationInput)
    tlsConfiguration?: TlsSubscriptionDataRelationships1TlsConfigurationInput;
}

export class TlsSubscriptionDataInput extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attributes" })
    @Type(() => TlsSubscriptionDataAttributes)
    attributes?: TlsSubscriptionDataAttributes;

    @SpeakeasyMetadata()
    @Expose({ name: "relationships" })
    relationships?: any;

    /**
     * Resource type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TypeTlsSubscription;
}
