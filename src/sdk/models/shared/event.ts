/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TypeEvent } from "./typeevent";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of event. Can be used with `filter[event_type]`
 */
export enum EventAttributesEventType {
    ApiKeyCreate = "api_key.create",
    AclCreate = "acl.create",
    AclDelete = "acl.delete",
    AclUpdate = "acl.update",
    AddressCreate = "address.create",
    AddressDelete = "address.delete",
    AddressUpdate = "address.update",
    BackendCreate = "backend.create",
    BackendDelete = "backend.delete",
    BackendUpdate = "backend.update",
    BillingContactUpdate = "billing.contact_update",
    CacheSettingsCreate = "cache_settings.create",
    CacheSettingsDelete = "cache_settings.delete",
    CacheSettingsUpdate = "cache_settings.update",
    CustomerCreate = "customer.create",
    CustomerPricing = "customer.pricing",
    CustomerUpdate = "customer.update",
    CustomerFeatureCreate = "customer_feature.create",
    CustomerFeatureDelete = "customer_feature.delete",
    DirectorCreate = "director.create",
    DirectorDelete = "director.delete",
    DirectorUpdate = "director.update",
    DirectorBackendCreate = "director_backend.create",
    DirectorBackendDelete = "director_backend.delete",
    DomainCreate = "domain.create",
    DomainDelete = "domain.delete",
    DomainUpdate = "domain.update",
    GzipCreate = "gzip.create",
    GzipDelete = "gzip.delete",
    GzipUpdate = "gzip.update",
    HeaderCreate = "header.create",
    HeaderDelete = "header.delete",
    HeaderUpdate = "header.update",
    HealthcheckCreate = "healthcheck.create",
    HealthcheckDelete = "healthcheck.delete",
    HealthcheckUpdate = "healthcheck.update",
    InvitationAccept = "invitation.accept",
    InvitationSent = "invitation.sent",
    InvoiceFailedPayment = "invoice.failed_payment",
    InvoicePayment = "invoice.payment",
    IoSettingsCreate = "io_settings.create",
    IoSettingsDelete = "io_settings.delete",
    IoSettingsUpdate = "io_settings.update",
    LoggingCreate = "logging.create",
    LoggingDelete = "logging.delete",
    LoggingUpdate = "logging.update",
    PoolCreate = "pool.create",
    PoolDelete = "pool.delete",
    PoolUpdate = "pool.update",
    RequestSettingsCreate = "request_settings.create",
    RequestSettingsDelete = "request_settings.delete",
    RequestSettingsUpdate = "request_settings.update",
    ResponseObjectCreate = "response_object.create",
    ResponseObjectDelete = "response_object.delete",
    ResponseObjectUpdate = "response_object.update",
    RuleStatusUpdate = "rule_status.update",
    RuleStatusUpsert = "rule_status.upsert",
    ServerCreate = "server.create",
    ServerDelete = "server.delete",
    ServerUpdate = "server.update",
    ServiceCreate = "service.create",
    ServiceDelete = "service.delete",
    ServiceMove = "service.move",
    ServiceMoveDestination = "service.move_destination",
    ServiceMoveSource = "service.move_source",
    ServicePurgeAll = "service.purge_all",
    ServiceUpdate = "service.update",
    ServiceAuthorizationCreate = "service_authorization.create",
    ServiceAuthorizationDelete = "service_authorization.delete",
    ServiceAuthorizationUpdate = "service_authorization.update",
    TlsBulkCertificateCreate = "tls.bulk_certificate.create",
    TlsBulkCertificateDelete = "tls.bulk_certificate.delete",
    TlsBulkCertificateUpdate = "tls.bulk_certificate.update",
    TlsCertificateCreate = "tls.certificate.create",
    TlsCertificateExpirationEmail = "tls.certificate.expiration_email",
    TlsCertificateUpdate = "tls.certificate.update",
    TlsCertificateDelete = "tls.certificate.delete",
    TlsConfigurationUpdate = "tls.configuration.update",
    TlsPrivateKeyCreate = "tls.private_key.create",
    TlsPrivateKeyDelete = "tls.private_key.delete",
    TlsActivationEnable = "tls.activation.enable",
    TlsActivationUpdate = "tls.activation.update",
    TlsActivationDisable = "tls.activation.disable",
    TlsGlobalsignDomainCreate = "tls.globalsign.domain.create",
    TlsGlobalsignDomainVerify = "tls.globalsign.domain.verify",
    TlsGlobalsignDomainDelete = "tls.globalsign.domain.delete",
    TlsSubscriptionCreate = "tls.subscription.create",
    TlsSubscriptionDelete = "tls.subscription.delete",
    TlsSubscriptionDnsCheckEmail = "tls.subscription.dns_check_email",
    TokenCreate = "token.create",
    TokenDestroy = "token.destroy",
    TwoFactorAuthDisable = "two_factor_auth.disable",
    TwoFactorAuthEnable = "two_factor_auth.enable",
    UserCreate = "user.create",
    UserDestroy = "user.destroy",
    UserLock = "user.lock",
    UserLogin = "user.login",
    UserLoginFailure = "user.login_failure",
    UserLogout = "user.logout",
    UserPasswordUpdate = "user.password_update",
    UserUnlock = "user.unlock",
    UserUpdate = "user.update",
    VclCreate = "vcl.create",
    VclDelete = "vcl.delete",
    VclUpdate = "vcl.update",
    VersionActivate = "version.activate",
    VersionClone = "version.clone",
    VersionCopy = "version.copy",
    VersionCopyDestination = "version.copy_destination",
    VersionCopySource = "version.copy_source",
    VersionCreate = "version.create",
    VersionDeactivate = "version.deactivate",
    VersionLock = "version.lock",
    VersionUpdate = "version.update",
    WafConfigurationSetUpdate = "waf.configuration_set_update",
    WafCreate = "waf.create",
    WafDelete = "waf.delete",
    WafUpdate = "waf.update",
    WafEnable = "waf.enable",
    WafDisable = "waf.disable",
    WafOwaspCreate = "waf.owasp.create",
    WafOwaspUpdate = "waf.owasp.update",
    WafRulesetDeploy = "waf.ruleset.deploy",
    WafRulesetDeployFailure = "waf.ruleset.deploy_failure",
    WordpressCreate = "wordpress.create",
    WordpressDelete = "wordpress.delete",
    WordpressUpdate = "wordpress.update",
}

/**
 * Hash of key value pairs of additional information.
 */
export class EventAttributesMetadata extends SpeakeasyBase {}

export class EventAttributes extends SpeakeasyBase {
    /**
     * Indicates if event was performed by Fastly.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "admin" })
    admin?: boolean;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Description of the event.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * Type of event. Can be used with `filter[event_type]`
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_type" })
    eventType?: EventAttributesEventType;

    /**
     * IP addresses that the event was requested from.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ip" })
    ip?: string;

    /**
     * Hash of key value pairs of additional information.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => EventAttributesMetadata)
    metadata?: EventAttributesMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "service_id" })
    serviceId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_id" })
    tokenId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "user_id" })
    userId?: string;
}

export class Event extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attributes" })
    @Type(() => EventAttributes)
    attributes?: EventAttributes;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Resource type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TypeEvent;
}
