/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * If set, will cause vcl_fetch to terminate after processing this rule with the return state specified. If not set, other configuration logic in vcl_fetch with a lower priority will run after this rule.
 *
 * @remarks
 *
 */
export enum CacheSettingResponseAction {
    Pass = "pass",
    Cache = "cache",
    Restart = "restart",
}

export class CacheSettingResponse extends SpeakeasyBase {
    /**
     * If set, will cause vcl_fetch to terminate after processing this rule with the return state specified. If not set, other configuration logic in vcl_fetch with a lower priority will run after this rule.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: CacheSettingResponseAction;

    /**
     * Name of the cache condition controlling when this configuration applies.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cache_condition" })
    cacheCondition?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * Name for the cache settings object.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "service_id" })
    serviceId?: string;

    /**
     * Maximum time in seconds to continue to use a stale version of the object if future requests to your backend server fail (also known as 'stale if error').
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stale_ttl" })
    staleTtl?: number;

    /**
     * Maximum time to consider the object fresh in the cache (the cache 'time to live').
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ttl" })
    ttl?: number;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: number;
}
