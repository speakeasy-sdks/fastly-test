/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RelationshipTlsActivationsInput } from "./relationshiptlsactivations";
import { TypeMutualAuthentication } from "./typemutualauthentication";
import { Expose, Type } from "class-transformer";

export class MutualAuthenticationDataAttributes extends SpeakeasyBase {
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted. Required on create. You may optionally rotate the cert_bundle on update.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cert_bundle" })
    certBundle?: string;

    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed. Optional. Defaults to true.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enforced" })
    enforced?: boolean;

    /**
     * A custom name for your mutual authentication. Optional. If name is not supplied we will auto-generate one.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class MutualAuthenticationDataInput extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attributes" })
    @Type(() => MutualAuthenticationDataAttributes)
    attributes?: MutualAuthenticationDataAttributes;

    @SpeakeasyMetadata()
    @Expose({ name: "relationships" })
    @Type(() => RelationshipTlsActivationsInput)
    relationships?: RelationshipTlsActivationsInput;

    /**
     * Resource type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TypeMutualAuthentication;
}
