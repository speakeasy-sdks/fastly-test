/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RelationshipServiceInvitationsCreate } from "./relationshipserviceinvitationscreate";
import { RoleUser } from "./roleuser";
import { TypeInvitation } from "./typeinvitation";
import { Expose, Type } from "class-transformer";

/**
 * Indicates whether or not the invitation is active.
 */
export enum InvitationDataStatusCode {
    Zero = 0,
    One = 1,
}

export class InvitationDataAttributes extends SpeakeasyBase {
    /**
     * The email address of the invitee.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * Indicates the user has limited access to the customer's services.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "limit_services" })
    limitServices?: boolean;

    /**
     * The permissions role assigned to the user. Can be `user`, `billing`, `engineer`, or `superuser`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "role" })
    role?: RoleUser;

    /**
     * Indicates whether or not the invitation is active.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status_code" })
    statusCode?: InvitationDataStatusCode;
}

export class InvitationData extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attributes" })
    @Type(() => InvitationDataAttributes)
    attributes?: InvitationDataAttributes;

    @SpeakeasyMetadata()
    @Expose({ name: "relationships" })
    @Type(() => RelationshipServiceInvitationsCreate)
    relationships?: RelationshipServiceInvitationsCreate;

    /**
     * Resource type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TypeInvitation;
}
