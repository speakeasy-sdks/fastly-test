/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
 */
export enum AclEntryResponseNegated {
    Zero = 0,
    One = 1,
}

/**
 * OK
 */
export class AclEntryResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "acl_id" })
    aclId?: string;

    /**
     * A freeform descriptive note.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "comment" })
    comment?: string;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * An IP address.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ip" })
    ip?: string;

    /**
     * Whether to negate the match. Useful primarily when creating individual exceptions to larger subnets.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "negated" })
    negated?: AclEntryResponseNegated;

    @SpeakeasyMetadata()
    @Expose({ name: "service_id" })
    serviceId?: string;

    /**
     * Number of bits for the subnet mask applied to the IP address. For IPv4 addresses, a value of 32 represents the smallest subnet mask (1 address), 24 represents a class C subnet mask (256 addresses), 16 represents a class B subnet mask (65k addresses), and 8 is class A subnet mask (16m addresses). If not provided, no mask is applied.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subnet" })
    subnet?: number;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}
