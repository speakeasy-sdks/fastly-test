/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BackendResponse } from "./backendresponse";
import { CacheSettingResponse } from "./cachesettingresponse";
import { ConditionResponse } from "./conditionresponse";
import { Director } from "./director";
import { DomainResponse } from "./domainresponse";
import { GzipResponse } from "./gzipresponse";
import { HeaderResponse } from "./headerresponse";
import { HealthcheckResponse } from "./healthcheckresponse";
import { RequestSettingsResponse } from "./requestsettingsresponse";
import { ResponseObjectResponse } from "./responseobjectresponse";
import { SchemasSnippetResponse } from "./schemassnippetresponse";
import { SchemasVclResponse } from "./schemasvclresponse";
import { Expose, Transform, Type } from "class-transformer";

/**
 * List of default settings for this service.
 */
export class ServiceVersionDetailSettings extends SpeakeasyBase {
    /**
     * The default host name for the version.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "general.default_host" })
    generalDefaultHost?: string;

    /**
     * The default time-to-live (TTL) for the version.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "general.default_ttl" })
    generalDefaultTtl?: number;

    /**
     * Enables serving a stale object if there is an error.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "general.stale_if_error" })
    generalStaleIfError?: boolean;

    /**
     * The default time-to-live (TTL) for serving the stale object for the version.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "general.stale_if_error_ttl" })
    generalStaleIfErrorTtl?: number;
}

export class ServiceVersionDetailWordpress extends SpeakeasyBase {}

export class ServiceVersionDetail extends SpeakeasyBase {
    /**
     * Whether this is the active version or not.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "active" })
    active?: boolean;

    /**
     * List of backends associated to this service.
     */
    @SpeakeasyMetadata({ elemType: BackendResponse })
    @Expose({ name: "backends" })
    @Type(() => BackendResponse)
    backends?: BackendResponse[];

    /**
     * List of cache settings associated to this service.
     */
    @SpeakeasyMetadata({ elemType: CacheSettingResponse })
    @Expose({ name: "cache_settings" })
    @Type(() => CacheSettingResponse)
    cacheSettings?: CacheSettingResponse[];

    /**
     * A freeform descriptive note.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "comment" })
    comment?: string;

    /**
     * List of conditions associated to this service.
     */
    @SpeakeasyMetadata({ elemType: ConditionResponse })
    @Expose({ name: "conditions" })
    @Type(() => ConditionResponse)
    conditions?: ConditionResponse[];

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * Unused at this time.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deployed" })
    deployed?: boolean;

    /**
     * List of directors associated to this service.
     */
    @SpeakeasyMetadata({ elemType: Director })
    @Expose({ name: "directors" })
    @Type(() => Director)
    directors?: Director[];

    /**
     * List of domains associated to this service.
     */
    @SpeakeasyMetadata({ elemType: DomainResponse })
    @Expose({ name: "domains" })
    @Type(() => DomainResponse)
    domains?: DomainResponse[];

    /**
     * List of gzip rules associated to this service.
     */
    @SpeakeasyMetadata({ elemType: GzipResponse })
    @Expose({ name: "gzips" })
    @Type(() => GzipResponse)
    gzips?: GzipResponse[];

    /**
     * List of headers associated to this service.
     */
    @SpeakeasyMetadata({ elemType: HeaderResponse })
    @Expose({ name: "headers" })
    @Type(() => HeaderResponse)
    headers?: HeaderResponse[];

    /**
     * List of healthchecks associated to this service.
     */
    @SpeakeasyMetadata({ elemType: HealthcheckResponse })
    @Expose({ name: "healthchecks" })
    @Type(() => HealthcheckResponse)
    healthchecks?: HealthcheckResponse[];

    /**
     * Whether this version is locked or not. Objects can not be added or edited on locked versions.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "locked" })
    locked?: boolean;

    /**
     * The number of this version.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "number" })
    number?: number;

    /**
     * List of request settings for this service.
     */
    @SpeakeasyMetadata({ elemType: RequestSettingsResponse })
    @Expose({ name: "request_settings" })
    @Type(() => RequestSettingsResponse)
    requestSettings?: RequestSettingsResponse[];

    /**
     * List of response objects for this service.
     */
    @SpeakeasyMetadata({ elemType: ResponseObjectResponse })
    @Expose({ name: "response_objects" })
    @Type(() => ResponseObjectResponse)
    responseObjects?: ResponseObjectResponse[];

    @SpeakeasyMetadata()
    @Expose({ name: "service_id" })
    serviceId?: string;

    /**
     * List of default settings for this service.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "settings" })
    @Type(() => ServiceVersionDetailSettings)
    settings?: ServiceVersionDetailSettings;

    /**
     * List of VCL snippets for this service.
     */
    @SpeakeasyMetadata({ elemType: SchemasSnippetResponse })
    @Expose({ name: "snippets" })
    @Type(() => SchemasSnippetResponse)
    snippets?: SchemasSnippetResponse[];

    /**
     * Unused at this time.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "staging" })
    staging?: boolean;

    /**
     * Unused at this time.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testing" })
    testing?: boolean;

    /**
     * Date and time in ISO 8601 format.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    /**
     * List of VCL files for this service.
     */
    @SpeakeasyMetadata({ elemType: SchemasVclResponse })
    @Expose({ name: "vcls" })
    @Type(() => SchemasVclResponse)
    vcls?: SchemasVclResponse[];

    /**
     * A list of Wordpress rules with this service.
     */
    @SpeakeasyMetadata({ elemType: ServiceVersionDetailWordpress })
    @Expose({ name: "wordpress" })
    @Type(() => ServiceVersionDetailWordpress)
    wordpress?: ServiceVersionDetailWordpress[];
}
