/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RealtimeEntry } from "./realtimeentry";
import { Expose, Type } from "class-transformer";

/**
 * OK
 */
export class Realtime extends SpeakeasyBase {
    /**
     * How long the system will wait before aggregating messages for each second. The most recent data returned will have happened at the moment of the request, minus the aggregation delay.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "AggregateDelay" })
    aggregateDelay?: number;

    /**
     * A list of [records](#record-data-model), each representing one second of time.
     */
    @SpeakeasyMetadata({ elemType: RealtimeEntry })
    @Expose({ name: "Data" })
    @Type(() => RealtimeEntry)
    data?: RealtimeEntry[];

    /**
     * Value to use for subsequent requests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "Timestamp" })
    timestamp?: number;
}
