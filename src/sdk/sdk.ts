/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Acl } from "./acl";
import { AclEntry } from "./aclentry";
import { ApexRedirect } from "./apexredirect";
import { Backend } from "./backend";
import { Billing } from "./billing";
import { BillingAddress } from "./billingaddress";
import { CacheSettings } from "./cachesettings";
import { Condition } from "./condition";
import { ConfigStore } from "./configstore";
import { ConfigStoreItem } from "./configstoreitem";
import { Contact } from "./contact";
import { Content } from "./content";
import { Customer } from "./customer";
import { Dictionary } from "./dictionary";
import { DictionaryInfo } from "./dictionaryinfo";
import { DictionaryItem } from "./dictionaryitem";
import { Diff } from "./diff";
import { Director } from "./director";
import { DirectorBackend } from "./directorbackend";
import { Domain } from "./domain";
import { DomainOwnerships } from "./domainownerships";
import { EnabledProducts } from "./enabledproducts";
import { Events } from "./events";
import { Gzip } from "./gzip";
import { Header } from "./header";
import { Healthcheck } from "./healthcheck";
import { Historical } from "./historical";
import { Http3 } from "./http3";
import { IamPermissions } from "./iampermissions";
import { IamRoles } from "./iamroles";
import { IamServiceGroups } from "./iamservicegroups";
import { IamUserGroups } from "./iamusergroups";
import { Invitations } from "./invitations";
import { KvStore } from "./kvstore";
import { KvStoreItem } from "./kvstoreitem";
import { LoggingAzureblob } from "./loggingazureblob";
import { LoggingBigquery } from "./loggingbigquery";
import { LoggingCloudfiles } from "./loggingcloudfiles";
import { LoggingDatadog } from "./loggingdatadog";
import { LoggingDigitalocean } from "./loggingdigitalocean";
import { LoggingElasticsearch } from "./loggingelasticsearch";
import { LoggingFtp } from "./loggingftp";
import { LoggingGcs } from "./logginggcs";
import { LoggingHeroku } from "./loggingheroku";
import { LoggingHoneycomb } from "./logginghoneycomb";
import { LoggingHttps } from "./logginghttps";
import { LoggingKafka } from "./loggingkafka";
import { LoggingKinesis } from "./loggingkinesis";
import { LoggingLogentries } from "./logginglogentries";
import { LoggingLoggly } from "./loggingloggly";
import { LoggingLogshuttle } from "./logginglogshuttle";
import { LoggingNewrelic } from "./loggingnewrelic";
import { LoggingOpenstack } from "./loggingopenstack";
import { LoggingPapertrail } from "./loggingpapertrail";
import { LoggingPubsub } from "./loggingpubsub";
import { LoggingS3 } from "./loggings3";
import { LoggingScalyr } from "./loggingscalyr";
import { LoggingSftp } from "./loggingsftp";
import { LoggingSplunk } from "./loggingsplunk";
import { LoggingSumologic } from "./loggingsumologic";
import { LoggingSyslog } from "./loggingsyslog";
import { MutualAuthentication } from "./mutualauthentication";
import { Package } from "./package";
import { Pool } from "./pool";
import { Pop } from "./pop";
import { PublicIpList } from "./publiciplist";
import { Publish } from "./publish";
import { Purge } from "./purge";
import { RateLimiter } from "./ratelimiter";
import { Realtime } from "./realtime";
import { RequestSettings } from "./requestsettings";
import { Resource } from "./resource";
import { ResponseObject } from "./responseobject";
import { Server } from "./server";
import { Service } from "./service";
import { ServiceAuthorizations } from "./serviceauthorizations";
import { Settings } from "./settings";
import { Snippet } from "./snippet";
import { Star } from "./star";
import { Stats } from "./stats";
import { TlsActivations } from "./tlsactivations";
import { TlsBulkCertificates } from "./tlsbulkcertificates";
import { TlsCertificates } from "./tlscertificates";
import { TlsConfigurations } from "./tlsconfigurations";
import { TlsDomains } from "./tlsdomains";
import { TlsPrivateKeys } from "./tlsprivatekeys";
import { TlsSubscriptions } from "./tlssubscriptions";
import { Tokens } from "./tokens";
import { User } from "./user";
import { Vcl } from "./vcl";
import { VclDiff } from "./vcldiff";
import { Version } from "./version";
import { WafActiveRules } from "./wafactiverules";
import { WafExclusions } from "./wafexclusions";
import { WafFirewalls } from "./waffirewalls";
import { WafFirewallVersions } from "./waffirewallversions";
import { WafRuleRevisions } from "./wafrulerevisions";
import { WafRules } from "./wafrules";
import { WafTags } from "./waftags";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.fastly.com", "https://rt.fastly.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    securityClient: AxiosInstance;
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "1.6.0";
    genVersion = "2.58.0";

    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Fastly API: Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports.
 *
 * @remarks
 * The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts.
 * For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/)
 *
 */
export class Fastly {
    /**
     * An access control list or "ACL" specifies individual IP addresses or subnet ranges and can be accessed and used from Fastly VCL.
     *
     * @see {@link https://developer.fastly.com/reference/api/acls/acl}
     */
    public acl: Acl;
    /**
     * An ACL entry holds an individual IP address or subnet range and is a member of an ACL. ACL entries are versionless, which means they can be created, modified, or deleted without activating a new version of your service.
     *
     * @remarks
     *
     *
     * @see {@link https://developer.fastly.com/reference/api/acls/acl-entry}
     */
    public aclEntry: AclEntry;
    /**
     * Supports redirecting traffic for apex domains, subdomains, or wildcard domains to a WWW subdomain.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/apex-redirect}
     */
    public apexRedirect: ApexRedirect;
    /**
     * A backend (also sometimes called an origin server) is a server identified by IP address or hostname, from which Fastly will fetch your content. There can be multiple backends attached to a service, but each backend is specific to one service. By default, the first backend added to a service configuration will be used for all requests (provided it meets any [conditions](/reference/api/vcl-services/condition) attached to it). If multiple backends are defined for a service, the first one that has no attached conditions, or whose condition is satisfied for the current request, will be used, unless that behavior is modified using the `auto_loadbalance` field described below.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/backend}
     */
    public backend: Backend;
    /**
     * Get information on current and past bills.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/billing}
     */
    public billing: Billing;
    /**
     * A billing address is used to calculate your bill correctly.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/billing-address}
     */
    public billingAddress: BillingAddress;
    /**
     * Configures cache lifetime for objects stored in the Fastly cache, overriding cache freshness information that would otherwise be determined from cache-related headers on the HTTP response. When used in conjunction with conditions, cache settings objects provide detailed control over how long content persists in the cache.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/cache-settings}
     */
    public cacheSettings: CacheSettings;
    /**
     * Conditions are used to control whether logic defined in configured VCL objects is applied for a particular client request. A condition contains a VCL conditional expression that evaluates to either true or false and is used to determine whether the condition is met. The type of the condition determines where it is executed and the VCL variables that can be evaluated as part of the conditional logic.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/condition}
     */
    public condition: Condition;
    /**
     * A container that lets you store data in key-value pairs.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/resources/config-store}
     */
    public configStore: ConfigStore;
    /**
     * A key-value pair within a config store.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/resources/config-store-item}
     */
    public configStoreItem: ConfigStoreItem;
    /**
     * A Customer Contact is the base object that holds the different types of contact information Fastly uses to contact a customer.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/contact}
     */
    public contact: Contact;
    /**
     * Fastly makes it possible to see which version of a particular URL is cached on each edge server.
     *
     * @see {@link https://developer.fastly.com/reference/api/utils/content}
     */
    public content: Content;
    /**
     * A Customer is the base object that owns your Users and Services. Some information may be limited depending on access level.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/customer}
     */
    public customer: Customer;
    /**
     * A Dictionary is a VCL data table that stores key-value pairs accessible to VCL during request processing. New, empty dictionaries can be attached to a draft version of a service, which must be activated for the dictionary to be included in VCL. Once installed, a dictionary's items may be updated via API calls without having to activate a new version of the associated service configuration. To remove a dictionary, delete it on a draft version of a service (one that is not locked and not active). Once removed, activate the draft service version without the dictionary.
     *
     * @see {@link https://developer.fastly.com/reference/api/dictionaries/dictionary}
     */
    public dictionary: Dictionary;
    /**
     * Dictionary Info is a set of metadata describing properties of a dictionary which change as items are added and removed.
     *
     * @see {@link https://developer.fastly.com/reference/api/dictionaries/dictionary-info}
     */
    public dictionaryInfo: DictionaryInfo;
    /**
     * A Dictionary Item is a single key-value pair that makes up an entry in a Dictionary. Dictionary Items can be added, removed and modified without activating a new version of the associated service.
     *
     * @see {@link https://developer.fastly.com/reference/api/dictionaries/dictionary-item}
     */
    public dictionaryItem: DictionaryItem;
    /**
     * See the line-by-line changes in configuration between two different versions of a service.
     *
     * @see {@link https://developer.fastly.com/reference/api/utils/diff}
     */
    public diff: Diff;
    /**
     * A Director is responsible for balancing requests among a group of Backends. In addition to simply balancing, Directors can be configured to attempt retrying failed requests. Additionally, Directors have a quorum setting which can be used to determine when the Director as a whole is considered "up", in order to prevent "server whack-a-mole" following an outage as servers come back up. Only directors created via the API can be modified via the API. Directors known as "autodirectors" that are created automatically when load balancing groups of servers together cannot be modified or retrieved via the API.
     *
     * @see {@link https://developer.fastly.com/reference/api/load-balancing/directors/director}
     */
    public director: Director;
    /**
     * Maps and relates backends as belonging to directors. Backends can belong to any number of directors but directors can only hold one reference to a specific backend.
     *
     * @see {@link https://developer.fastly.com/reference/api/load-balancing/directors/backend}
     */
    public directorBackend: DirectorBackend;
    /**
     * A domain represents the domain name through which visitors will retrieve content. There can be multiple domains for a service.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/domain}
     */
    public domain: Domain;
    /**
     * A domain ownership is the record that Fastly keeps after a customer has validated control over a domain.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/domain-ownerships}
     */
    public domainOwnerships: DomainOwnerships;
    /**
     * These endpoints allow you to enable, disable, and check the enablement status of products on your services.
     *
     * @see {@link https://developer.fastly.com/reference/api/products/enablement}
     */
    public enabledProducts: EnabledProducts;
    /**
     * [Event logs](https://docs.fastly.com/en/guides/reviewing-service-activity-with-the-event-log) are used to audit actions performed by customers.
     *
     * @remarks
     *
     *
     * @see {@link https://developer.fastly.com/reference/api/account/events}
     */
    public events: Events;
    /**
     * Gzip configuration allows you to choose resources to automatically compress.  For more information about compressing and decompressing data with Fastly, check out our [concept guide to compression](https://developer.fastly.com/learning/concepts/compression/).
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/gzip}
     */
    public gzip: Gzip;
    /**
     * Header objects are used to add, modify, or delete headers from requests and responses. The header content can be simple strings or be derived from variables inside Varnish. Regular expressions can be used to customize the headers even further.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/header}
     */
    public header: Header;
    /**
     * Health checks are used to customize the way Fastly checks on your Backends. If an origin server is marked unhealthy due to health checks, Fastly will stop attempting to send requests to it. If all origin servers are marked unhealthy, Fastly will attempt to serve stale. If no stale object is available, a 503 will be returned to the client.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/healthcheck}
     */
    public healthcheck: Healthcheck;
    /**
     * The Historical Stats API allows you to programmatically retrieve historical caching statistics derived from your Fastly services. You can use these metrics to help you optimize your site’s data caching and analyze your site’s traffic.
     *
     * @see {@link https://developer.fastly.com/reference/api/metrics-stats/historical-stats}
     */
    public historical: Historical;
    /**
     * Supports the use of the HTTP/3 (QUIC) protocol.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/http3}
     */
    public http3: Http3;
    /**
     * A list of available permissions that can be assigned to a custom role.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/permissions}
     */
    public iamPermissions: IamPermissions;
    /**
     * A role is a collection of permissions that can be assigned to a user group.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/roles}
     */
    public iamRoles: IamRoles;
    /**
     * A service group is a collection of services that can be assigned to a user group.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/service-groups}
     */
    public iamServiceGroups: IamServiceGroups;
    /**
     * A user group is a collection of users with service groups and roles.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/user-groups}
     */
    public iamUserGroups: IamUserGroups;
    /**
     * Invitations allow superusers and engineers to invite users to set up accounts as collaborators under a main customer account. Superusers can invite collaborators and assign them any role or permission level on a per-service basis. Engineers with no per-service limitations on their role can only invite new collaborators but cannot modify their permissions.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/invitations}
     */
    public invitations: Invitations;
    /**
     * An kv store is a persistent, globally consistent key-value store accessible to Compute@Edge services during request processing.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/resources/kv-store}
     */
    public kvStore: KvStore;
    /**
     * An item in an kv store.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/resources/kv-store-item}
     */
    public kvStoreItem: KvStoreItem;
    /**
     * Fastly will upload log messages to the Azure Blob Storage container in the format specified in the Azure Blob object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/azureblob}
     */
    public loggingAzureblob: LoggingAzureblob;
    /**
     * Fastly will upload log messages to the Google BigQuery dataset and table in the format specified in the BigQuery logging object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/bigquery}
     */
    public loggingBigquery: LoggingBigquery;
    /**
     * Fastly will upload log messages to your Rackspace Cloud Files account.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/cloudfiles}
     */
    public loggingCloudfiles: LoggingCloudfiles;
    /**
     * Fastly will upload log messages to Datadog in the format specified in the Datadog configuration object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/datadog}
     */
    public loggingDatadog: LoggingDatadog;
    /**
     * Fastly will upload log messages to the DigitalOcean Space in the format specified in the DigitalOcean Spaces object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/digitalocean}
     */
    public loggingDigitalocean: LoggingDigitalocean;
    /**
     * Fastly will upload log messages periodically to the server in the format specified in the Elasticsearch object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/elasticsearch}
     */
    public loggingElasticsearch: LoggingElasticsearch;
    /**
     * Fastly will upload log messages periodically to the server in the format specified in the FTP object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/ftp}
     */
    public loggingFtp: LoggingFtp;
    /**
     * Fastly will upload log messages to the GCS bucket in the format specified in the GCS object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/gcs}
     */
    public loggingGcs: LoggingGcs;
    /**
     * Fastly will stream log messages to the Heroku account in the format specified in the Heroku object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/heroku}
     */
    public loggingHeroku: LoggingHeroku;
    /**
     * Fastly will upload log messages to Honeycomb.io in the format specified in the Honeycomb object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/honeycomb}
     */
    public loggingHoneycomb: LoggingHoneycomb;
    /**
     * Fastly will upload log messages to an HTTPS endpoint in the format specified in the HTTPS object. The HTTPS endpoint requires proof of domain ownership before logs can be received. Learn how to validate your domain in our [HTTPS endpoint documentation](https://docs.fastly.com/en/guides/log-streaming-https).
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/https}
     */
    public loggingHttps: LoggingHttps;
    /**
     * Fastly will upload log messages periodically to the server in the format specified in the Kafka object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/kafka}
     */
    public loggingKafka: LoggingKafka;
    /**
     * Fastly will publish log messages to an Amazon Kinesis stream in the format specified in the Amazon Kinesis Data Streams logging object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/kinesis}
     */
    public loggingKinesis: LoggingKinesis;
    /**
     * The Logentries integration has been discontinued.  No new Logentries endpoints can be created.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/logentries}
     */
    public loggingLogentries: LoggingLogentries;
    /**
     * Fastly will stream log messages to the Loggly account in the format specified in the Loggly logging object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/loggly}
     */
    public loggingLoggly: LoggingLoggly;
    /**
     * Fastly will upload log messages to the Log Shuttle bucket in the format specified in the logshuttle object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/logshuttle}
     */
    public loggingLogshuttle: LoggingLogshuttle;
    /**
     * Fastly will upload log messages to New Relic Logs in the format specified in the New Relic configuration object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/newrelic}
     */
    public loggingNewrelic: LoggingNewrelic;
    /**
     * Fastly will upload log messages to the OpenStack bucket in the format specified in the openstack object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/openstack}
     */
    public loggingOpenstack: LoggingOpenstack;
    /**
     * Fastly will stream log messages to the Papertrail account in the format specified in the Papertrail object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/papertrail}
     */
    public loggingPapertrail: LoggingPapertrail;
    /**
     * Fastly will publish log messages to a Google Cloud Pub/Sub topic in the format specified in the Pub/Sub logging object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/gcp-pubsub}
     */
    public loggingPubsub: LoggingPubsub;
    /**
     * Fastly will upload log messages to the S3 bucket in the format specified in the S3 object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/s3}
     */
    public loggingS3: LoggingS3;
    /**
     * Fastly will stream log messages to the Scalyr account in the format specified in the Scalyr object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/scalyr}
     */
    public loggingScalyr: LoggingScalyr;
    /**
     * Fastly will upload log messages periodically to the server in the format specified in the SFTP object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/sftp}
     */
    public loggingSftp: LoggingSftp;
    /**
     * Fastly will POST messages to your Splunk account in the format specified in the Splunk object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/splunk}
     */
    public loggingSplunk: LoggingSplunk;
    /**
     * Fastly will POST messages to the Sumo Logic account in the format specified in the Sumologic object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/sumologic}
     */
    public loggingSumologic: LoggingSumologic;
    /**
     * Fastly will stream log messages to the location in the format specified in the Syslog object.
     *
     * @see {@link https://developer.fastly.com/reference/api/logging/syslog}
     */
    public loggingSyslog: LoggingSyslog;
    /**
     * The Mutual TLS API allows for client-to-server authentication using client-side X.509 authentication. The main Mutual Authentication object represents the certificate bundle and other configurations which support Mutual TLS for your domains.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/mutual-tls/authentication}
     */
    public mutualAuthentication: MutualAuthentication;
    /**
     * Compute@Edge is a computation platform capable of running custom binary packages that you compile on your own systems and upload to Fastly. These packages are associated with a service version and are deployed to Fastly's edge network.
     *
     * @remarks
     *
     *
     * @see {@link https://developer.fastly.com/reference/api/services/package}
     */
    public package: Package;
    /**
     * A pool is responsible for balancing requests among a group of servers. In addition to balancing, pools can be configured to attempt retrying failed requests. Pools have a quorum setting that can be used to determine when the pool as a whole is considered up, in order to prevent problems following an outage as servers come back up.
     *
     * @see {@link https://developer.fastly.com/reference/api/load-balancing/pools/pool}
     */
    public pool: Pool;
    /**
     * List Fastly POPs and their locations.
     *
     * @see {@link https://developer.fastly.com/reference/api/utils/pops}
     */
    public pop: Pop;
    /**
     * To help you manage firewall rules for connections from Fastly to your origin, we provide access to the [list of Fastly's assigned IP ranges](https://api.fastly.com/public-ip-list). Changes to this list will be announced in advance as an "IP address announcement" along with other service announcements to our [status page](https://fastlystatus.com/), which you can [subscribe](https://docs.fastly.com/en/guides/fastlys-network-status#subscribing-to-notifications) to. This list is exhaustive and includes all Fastly-owned IP ranges, so any client connections, log streaming reports, and origin connections should use these addresses.
     *
     * @see {@link https://developer.fastly.com/reference/api/utils/public-ip-list}
     */
    public publicIpList: PublicIpList;
    /**
     * Publishing sends messages to [Fanout](https://developer.fastly.com/learning/concepts/real-time-messaging/fanout) subscribers. Fanout is designed to be [GRIP-compatible](https://pushpin.org/docs/protocols/grip/), such that `https://api.fastly.com/service/{service_id}` can be used as a GRIP URL in application configurations.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/service}
     */
    public publish: Publish;
    /**
     * Instant Purging removes content from Fastly immediately so it can be refreshed from your origin servers. While the default approach for issuing an individual URL Instant Purge uses the Fastly API, `https://api.fastly.com/`, it is not required.
     *
     * @see {@link https://developer.fastly.com/reference/api/purging}
     */
    public purge: Purge;
    /**
     * Rate limiters add configurable origin request rate limiting to a service. This information is part of a limited availability release. For more information, see our [product and feature lifecycle](https://docs.fastly.com/products/fastly-product-lifecycle#limited-availability) descriptions. To use this feature you must purchase a Professional or Premier Platform subscription for either [Signal Sciences Cloud WAF](https://docs.fastly.com/products/signal-sciences-cloud-waf) or [Signal Sciences Next-Gen WAF](https://docs.fastly.com/products/signal-sciences-next-gen-waf) and have a [paid account with a contract](https://docs.fastly.com/en/guides/accounts-and-pricing-plans#paid-accounts-with-contractual-commitments) for [full-site delivery](https://docs.fastly.com/products/fastlys-legacy-full-site-delivery-services).
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/rate-limiter}
     */
    public rateLimiter: RateLimiter;
    /**
     * The real-time analytics API offers a standardized set of data about traffic received by a specified service in one-second time periods up to the last complete second.
     *
     * @see {@link https://developer.fastly.com/reference/api/metrics-stats/realtime}
     */
    public realtime: Realtime;
    /**
     * Settings used to customize Fastly's request handling. When used with [Conditions](#condition) the Request Settings object allows you to fine tune how specific types of requests are handled.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/request-settings}
     */
    public requestSettings: RequestSettings;
    /**
     * A resource link represents a link between a shared resource (such as an kv store or config store) and a service version.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/resource}
     */
    public resource: Resource;
    /**
     * Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your backend architecture. Best when used with [Condition](#condition) objects.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/response-object}
     */
    public responseObject: ResponseObject;
    /**
     * A server is an address (IP address or hostname) to which the Fastly Load Balancer service can forward requests. This service can define multiple servers and assign it to a pool. Fastly can then select any one of these servers based on a selection policy defined for the pool.
     *
     * @see {@link https://developer.fastly.com/reference/api/load-balancing/pools/server}
     */
    public server: Server;
    /**
     * A Service represents the configuration for a website, app, API, or anything else to be served through Fastly. A Service can have many Versions, through which Backends, Domains, and more can be configured.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/service}
     */
    public service: Service;
    /**
     * A service authorization allows limited users to access only specified services.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/service-authorization}
     */
    public serviceAuthorizations: ServiceAuthorizations;
    /**
     * Handles default settings for a particular version of a service.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/settings}
     */
    public settings: Settings;
    /**
     * VCL Snippets are blocks of VCL logic inserted into your service's configuration that don't require custom VCL.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/snippet}
     */
    public snippet: Snippet;
    /**
     * A star allows users to mark services of interest.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/star}
     */
    public star: Star;
    /**
     * Stats give you information on the usage and performance of your Service. They can be requested by Service and over a particular time span. Stats are broken down per POP, giving you information on how your Services are being used across the world. There is now a more flexible, and fully featured [Stats API](/reference/api/metrics-stats/historical-stats/) available.
     *
     * @see {@link https://developer.fastly.com/reference/api/metrics-stats/stats}
     */
    public stats: Stats;
    /**
     * TLS activations.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/custom-certs/activations}
     */
    public tlsActivations: TlsActivations;
    /**
     * Available to Platform TLS customers, these endpoints streamline the upload, deployment and management of large numbers of TLS certificates. A certificate is used to terminate TLS traffic for one or more of your fully qualified domain names (domains). Uploading a new certificate automatically enables TLS for all domains listed as Subject Alternative Names (SAN entries) on the certificate.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/platform}
     */
    public tlsBulkCertificates: TlsBulkCertificates;
    /**
     * A TLS certificate is used to terminate TLS traffic for one or more of your [TLS domains](#tls_domains).
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/custom-certs/certificates}
     */
    public tlsCertificates: TlsCertificates;
    /**
     * Customers with access to multiple sets of IP pools are able to apply different configuration options to their TLS enabled domains.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/configuration}
     */
    public tlsConfigurations: TlsConfigurations;
    /**
     * TLS domains are all the domains (including wildcard domains) included in any [TLS certificate](#tls_certificates)'s Subject Alternative Names (SAN) list. Included in the response is information about which certificates reference this domain as well as the [TLS activation](#tls_activations) indicating which certificate is enabled to serve TLS traffic for the domain.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/custom-certs/domains}
     */
    public tlsDomains: TlsDomains;
    /**
     * A private key is used to sign a Certificate. A key can be used to sign multiple certificates.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/custom-certs/private-keys}
     */
    public tlsPrivateKeys: TlsPrivateKeys;
    /**
     * The TLS subscriptions API allows you to programmatically generate TLS certificates that are procured and renewed by Fastly. Once a subscription is created for a given hostname or wildcard domain, DNS records are checked to ensure that the domain on the subscription is owned by the subscription creator. Provided DNS records are maintained, TLS certificates will automatically renew. If Fastly is unable to issue a certificate, we will retry to issue the certificate for 7 days past subscription creation or the latest certificate's not_after date, whichever is later. If after 7 days Fastly is unable to issue a certificate, the subscription state will change to `failed` and Fastly will stop retrying.
     *
     * @see {@link https://developer.fastly.com/reference/api/tls/subs}
     */
    public tlsSubscriptions: TlsSubscriptions;
    /**
     * An API Token is used to identify who is making the API call. Users can create multiple tokens to suit their needs.
     *
     * @see {@link https://developer.fastly.com/reference/api/auth-tokens/user}
     */
    public tokens: Tokens;
    /**
     * A user of the Fastly API and web interface. A user is always associated with a customer. Some information may be limited depending on access level.
     *
     * @see {@link https://developer.fastly.com/reference/api/account/user}
     */
    public user: User;
    /**
     * A VCL is a Varnish configuration file used to customize the configuration for a Service.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/vcl}
     */
    public vcl: Vcl;
    /**
     * Compare the changes in generated VCL between two versions of a service. This is sometimes called a "diff" because the comparison may highlight "differences" between the versions. To compare the configuration changes between two versions of a service represented in YAML format instead, use the related [diff](/reference/api/utils/diff/#diff-service-versions) endpoint.
     *
     * @see {@link https://developer.fastly.com/reference/api/vcl-services/diff}
     */
    public vclDiff: VclDiff;
    /**
     * A Version represents a specific instance of the configuration for a service. A Version can be cloned, locked, activated, or deactivated.
     *
     * @see {@link https://developer.fastly.com/reference/api/services/version}
     */
    public version: Version;
    /**
     * An active rule represents a [rule revision](/reference/api/waf/rules/revisions/) added to a particular [firewall version](/reference/api/waf/firewall-version/).
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/rules/active}
     */
    public wafActiveRules: WafActiveRules;
    /**
     * WAF rule exclusions provide a flexible way to handle false positives, allowing specific variables, rules, and the entire WAF to be excluded on a per request basis. You can configure up to 300 WAF exclusions and each exclusion of type `rule` can have up to 30 rules associated with it.
     *
     * @remarks
     *
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/rules/exclusions}
     */
    public wafExclusions: WafExclusions;
    /**
     * Firewall version objects contain all of the rules and settings for your WAF and remain empty until properly configured. To understand the behavior of thresholds and scores, see [Managing rules](https://docs.fastly.com/en/guides/managing-rules-on-the-fastly-waf#understanding-scoring-active-rule-behavior). Newly created firewall versions are initiated without any associated rules. See [Active Rules](/reference/api/waf/rules/active/) for details. Changes to your WAF's rules and settings can be made by [cloning](/reference/api/waf/firewall-version/#clone-waf-firewall-version) an existing firewall version, making the changes, and then [activating](/reference/api/waf/firewall-version/#deploy-activate-waf-firewall-version) the new firewall version.
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/firewall/version}
     */
    public wafFirewallVersions: WafFirewallVersions;
    /**
     * A firewall represents a configuration of a Web Application Firewall (WAF) on a service. A firewall has many firewall versions through which you can manage rules.
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/firewall}
     */
    public wafFirewalls: WafFirewalls;
    /**
     * Rule revisions track new variations of [rules](/reference/api/waf/rules/) as they change over time with enhancements, fixes, and improvements. This object allows you to find a specific variation of a rule for use in your application. An [active rule](/reference/api/waf/rules/active/) on a firewall uses a specific rule revision.
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/rules/revisions}
     */
    public wafRuleRevisions: WafRuleRevisions;
    /**
     * Rules are universally available for every firewall. Rules can have one or multiple [rule revisions](/reference/api/waf/rules/revisions/). You can add rules to your firewall by creating [active rules](/reference/api/waf/rules/active/).
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/rules}
     */
    public wafRules: WafRules;
    /**
     * Tags for categorizing WAF [rules](/reference/api/waf/rules/).
     *
     * @see {@link https://developer.fastly.com/reference/api/waf/tags}
     */
    public wafTags: WafTags;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create({ baseURL: serverURL });
        const securityClient = defaultClient;

        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            securityClient: securityClient,
            serverURL: serverURL,
        });

        this.acl = new Acl(this.sdkConfiguration);
        this.aclEntry = new AclEntry(this.sdkConfiguration);
        this.apexRedirect = new ApexRedirect(this.sdkConfiguration);
        this.backend = new Backend(this.sdkConfiguration);
        this.billing = new Billing(this.sdkConfiguration);
        this.billingAddress = new BillingAddress(this.sdkConfiguration);
        this.cacheSettings = new CacheSettings(this.sdkConfiguration);
        this.condition = new Condition(this.sdkConfiguration);
        this.configStore = new ConfigStore(this.sdkConfiguration);
        this.configStoreItem = new ConfigStoreItem(this.sdkConfiguration);
        this.contact = new Contact(this.sdkConfiguration);
        this.content = new Content(this.sdkConfiguration);
        this.customer = new Customer(this.sdkConfiguration);
        this.dictionary = new Dictionary(this.sdkConfiguration);
        this.dictionaryInfo = new DictionaryInfo(this.sdkConfiguration);
        this.dictionaryItem = new DictionaryItem(this.sdkConfiguration);
        this.diff = new Diff(this.sdkConfiguration);
        this.director = new Director(this.sdkConfiguration);
        this.directorBackend = new DirectorBackend(this.sdkConfiguration);
        this.domain = new Domain(this.sdkConfiguration);
        this.domainOwnerships = new DomainOwnerships(this.sdkConfiguration);
        this.enabledProducts = new EnabledProducts(this.sdkConfiguration);
        this.events = new Events(this.sdkConfiguration);
        this.gzip = new Gzip(this.sdkConfiguration);
        this.header = new Header(this.sdkConfiguration);
        this.healthcheck = new Healthcheck(this.sdkConfiguration);
        this.historical = new Historical(this.sdkConfiguration);
        this.http3 = new Http3(this.sdkConfiguration);
        this.iamPermissions = new IamPermissions(this.sdkConfiguration);
        this.iamRoles = new IamRoles(this.sdkConfiguration);
        this.iamServiceGroups = new IamServiceGroups(this.sdkConfiguration);
        this.iamUserGroups = new IamUserGroups(this.sdkConfiguration);
        this.invitations = new Invitations(this.sdkConfiguration);
        this.kvStore = new KvStore(this.sdkConfiguration);
        this.kvStoreItem = new KvStoreItem(this.sdkConfiguration);
        this.loggingAzureblob = new LoggingAzureblob(this.sdkConfiguration);
        this.loggingBigquery = new LoggingBigquery(this.sdkConfiguration);
        this.loggingCloudfiles = new LoggingCloudfiles(this.sdkConfiguration);
        this.loggingDatadog = new LoggingDatadog(this.sdkConfiguration);
        this.loggingDigitalocean = new LoggingDigitalocean(this.sdkConfiguration);
        this.loggingElasticsearch = new LoggingElasticsearch(this.sdkConfiguration);
        this.loggingFtp = new LoggingFtp(this.sdkConfiguration);
        this.loggingGcs = new LoggingGcs(this.sdkConfiguration);
        this.loggingHeroku = new LoggingHeroku(this.sdkConfiguration);
        this.loggingHoneycomb = new LoggingHoneycomb(this.sdkConfiguration);
        this.loggingHttps = new LoggingHttps(this.sdkConfiguration);
        this.loggingKafka = new LoggingKafka(this.sdkConfiguration);
        this.loggingKinesis = new LoggingKinesis(this.sdkConfiguration);
        this.loggingLogentries = new LoggingLogentries(this.sdkConfiguration);
        this.loggingLoggly = new LoggingLoggly(this.sdkConfiguration);
        this.loggingLogshuttle = new LoggingLogshuttle(this.sdkConfiguration);
        this.loggingNewrelic = new LoggingNewrelic(this.sdkConfiguration);
        this.loggingOpenstack = new LoggingOpenstack(this.sdkConfiguration);
        this.loggingPapertrail = new LoggingPapertrail(this.sdkConfiguration);
        this.loggingPubsub = new LoggingPubsub(this.sdkConfiguration);
        this.loggingS3 = new LoggingS3(this.sdkConfiguration);
        this.loggingScalyr = new LoggingScalyr(this.sdkConfiguration);
        this.loggingSftp = new LoggingSftp(this.sdkConfiguration);
        this.loggingSplunk = new LoggingSplunk(this.sdkConfiguration);
        this.loggingSumologic = new LoggingSumologic(this.sdkConfiguration);
        this.loggingSyslog = new LoggingSyslog(this.sdkConfiguration);
        this.mutualAuthentication = new MutualAuthentication(this.sdkConfiguration);
        this.package = new Package(this.sdkConfiguration);
        this.pool = new Pool(this.sdkConfiguration);
        this.pop = new Pop(this.sdkConfiguration);
        this.publicIpList = new PublicIpList(this.sdkConfiguration);
        this.publish = new Publish(this.sdkConfiguration);
        this.purge = new Purge(this.sdkConfiguration);
        this.rateLimiter = new RateLimiter(this.sdkConfiguration);
        this.realtime = new Realtime(this.sdkConfiguration);
        this.requestSettings = new RequestSettings(this.sdkConfiguration);
        this.resource = new Resource(this.sdkConfiguration);
        this.responseObject = new ResponseObject(this.sdkConfiguration);
        this.server = new Server(this.sdkConfiguration);
        this.service = new Service(this.sdkConfiguration);
        this.serviceAuthorizations = new ServiceAuthorizations(this.sdkConfiguration);
        this.settings = new Settings(this.sdkConfiguration);
        this.snippet = new Snippet(this.sdkConfiguration);
        this.star = new Star(this.sdkConfiguration);
        this.stats = new Stats(this.sdkConfiguration);
        this.tlsActivations = new TlsActivations(this.sdkConfiguration);
        this.tlsBulkCertificates = new TlsBulkCertificates(this.sdkConfiguration);
        this.tlsCertificates = new TlsCertificates(this.sdkConfiguration);
        this.tlsConfigurations = new TlsConfigurations(this.sdkConfiguration);
        this.tlsDomains = new TlsDomains(this.sdkConfiguration);
        this.tlsPrivateKeys = new TlsPrivateKeys(this.sdkConfiguration);
        this.tlsSubscriptions = new TlsSubscriptions(this.sdkConfiguration);
        this.tokens = new Tokens(this.sdkConfiguration);
        this.user = new User(this.sdkConfiguration);
        this.vcl = new Vcl(this.sdkConfiguration);
        this.vclDiff = new VclDiff(this.sdkConfiguration);
        this.version = new Version(this.sdkConfiguration);
        this.wafActiveRules = new WafActiveRules(this.sdkConfiguration);
        this.wafExclusions = new WafExclusions(this.sdkConfiguration);
        this.wafFirewallVersions = new WafFirewallVersions(this.sdkConfiguration);
        this.wafFirewalls = new WafFirewalls(this.sdkConfiguration);
        this.wafRuleRevisions = new WafRuleRevisions(this.sdkConfiguration);
        this.wafRules = new WafRules(this.sdkConfiguration);
        this.wafTags = new WafTags(this.sdkConfiguration);
    }
}
